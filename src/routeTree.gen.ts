/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as authSignInImport } from './routes/(auth)/sign-in'
import { Route as authOtpImport } from './routes/(auth)/otp'
import { Route as auth500Import } from './routes/(auth)/500'

// Create Virtual Routes

const errors503LazyImport = createFileRoute('/(errors)/503')()
const errors500LazyImport = createFileRoute('/(errors)/500')()
const errors404LazyImport = createFileRoute('/(errors)/404')()
const errors403LazyImport = createFileRoute('/(errors)/403')()
const errors401LazyImport = createFileRoute('/(errors)/401')()
const authSignUpLazyImport = createFileRoute('/(auth)/sign-up')()
const authSignIn2LazyImport = createFileRoute('/(auth)/sign-in-2')()
const authForgotPasswordLazyImport = createFileRoute(
  '/(auth)/forgot-password',
)()
const AuthenticatedSettingsRouteLazyImport = createFileRoute(
  '/_authenticated/settings',
)()
const AuthenticatedWorkFlowIndexLazyImport = createFileRoute(
  '/_authenticated/work-flow/',
)()
const AuthenticatedUsersIndexLazyImport = createFileRoute(
  '/_authenticated/users/',
)()
const AuthenticatedSettingsIndexLazyImport = createFileRoute(
  '/_authenticated/settings/',
)()
const AuthenticatedReferencedataIndexLazyImport = createFileRoute(
  '/_authenticated/referencedata/',
)()
const AuthenticatedPromptsIndexLazyImport = createFileRoute(
  '/_authenticated/prompts/',
)()
const AuthenticatedIntegrationIndexLazyImport = createFileRoute(
  '/_authenticated/integration/',
)()
const AuthenticatedHelpCenterIndexLazyImport = createFileRoute(
  '/_authenticated/help-center/',
)()
const AuthenticatedDemoIndexLazyImport = createFileRoute(
  '/_authenticated/demo/',
)()
const AuthenticatedContentsourceIndexLazyImport = createFileRoute(
  '/_authenticated/content_source/',
)()
const AuthenticatedContentIndexLazyImport = createFileRoute(
  '/_authenticated/content/',
)()
const AuthenticatedCalenderIndexLazyImport = createFileRoute(
  '/_authenticated/calender/',
)()
const AuthenticatedSettingsNotificationsLazyImport = createFileRoute(
  '/_authenticated/settings/notifications',
)()
const AuthenticatedSettingsDisplayLazyImport = createFileRoute(
  '/_authenticated/settings/display',
)()
const AuthenticatedSettingsAppearanceLazyImport = createFileRoute(
  '/_authenticated/settings/appearance',
)()
const AuthenticatedSettingsAccountLazyImport = createFileRoute(
  '/_authenticated/settings/account',
)()
const AuthenticatedContentsourceRssfeedsLazyImport = createFileRoute(
  '/_authenticated/content_source/rss_feeds',
)()
const AuthenticatedContentsourceRedditLazyImport = createFileRoute(
  '/_authenticated/content_source/reddit',
)()
const AuthenticatedContentsourcePdfLazyImport = createFileRoute(
  '/_authenticated/content_source/pdf',
)()
const AuthenticatedContentsourceGooglesheetsLazyImport = createFileRoute(
  '/_authenticated/content_source/google_sheets',
)()
const AuthenticatedContentsourceExcelLazyImport = createFileRoute(
  '/_authenticated/content_source/excel',
)()
const AuthenticatedContentsourceApiLazyImport = createFileRoute(
  '/_authenticated/content_source/api',
)()

// Create/Update Routes

const AuthenticatedRouteRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const errors503LazyRoute = errors503LazyImport
  .update({
    id: '/(errors)/503',
    path: '/503',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/503.lazy').then((d) => d.Route))

const errors500LazyRoute = errors500LazyImport
  .update({
    id: '/(errors)/500',
    path: '/500',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/500.lazy').then((d) => d.Route))

const errors404LazyRoute = errors404LazyImport
  .update({
    id: '/(errors)/404',
    path: '/404',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/404.lazy').then((d) => d.Route))

const errors403LazyRoute = errors403LazyImport
  .update({
    id: '/(errors)/403',
    path: '/403',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/403.lazy').then((d) => d.Route))

const errors401LazyRoute = errors401LazyImport
  .update({
    id: '/(errors)/401',
    path: '/401',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/401.lazy').then((d) => d.Route))

const authSignUpLazyRoute = authSignUpLazyImport
  .update({
    id: '/(auth)/sign-up',
    path: '/sign-up',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/sign-up.lazy').then((d) => d.Route))

const authSignIn2LazyRoute = authSignIn2LazyImport
  .update({
    id: '/(auth)/sign-in-2',
    path: '/sign-in-2',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/sign-in-2.lazy').then((d) => d.Route))

const authForgotPasswordLazyRoute = authForgotPasswordLazyImport
  .update({
    id: '/(auth)/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./routes/(auth)/forgot-password.lazy').then((d) => d.Route),
  )

const AuthenticatedSettingsRouteLazyRoute =
  AuthenticatedSettingsRouteLazyImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/route.lazy').then((d) => d.Route),
  )

const authSignInRoute = authSignInImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const authOtpRoute = authOtpImport.update({
  id: '/(auth)/otp',
  path: '/otp',
  getParentRoute: () => rootRoute,
} as any)

const auth500Route = auth500Import.update({
  id: '/(auth)/500',
  path: '/500',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedWorkFlowIndexLazyRoute =
  AuthenticatedWorkFlowIndexLazyImport.update({
    id: '/work-flow/',
    path: '/work-flow/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/work-flow/index.lazy').then((d) => d.Route),
  )

const AuthenticatedUsersIndexLazyRoute =
  AuthenticatedUsersIndexLazyImport.update({
    id: '/users/',
    path: '/users/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/users/index.lazy').then((d) => d.Route),
  )

const AuthenticatedSettingsIndexLazyRoute =
  AuthenticatedSettingsIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/index.lazy').then((d) => d.Route),
  )

const AuthenticatedReferencedataIndexLazyRoute =
  AuthenticatedReferencedataIndexLazyImport.update({
    id: '/referencedata/',
    path: '/referencedata/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/referencedata/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedPromptsIndexLazyRoute =
  AuthenticatedPromptsIndexLazyImport.update({
    id: '/prompts/',
    path: '/prompts/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/prompts/index.lazy').then((d) => d.Route),
  )

const AuthenticatedIntegrationIndexLazyRoute =
  AuthenticatedIntegrationIndexLazyImport.update({
    id: '/integration/',
    path: '/integration/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/integration/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedHelpCenterIndexLazyRoute =
  AuthenticatedHelpCenterIndexLazyImport.update({
    id: '/help-center/',
    path: '/help-center/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/help-center/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedDemoIndexLazyRoute = AuthenticatedDemoIndexLazyImport.update(
  {
    id: '/demo/',
    path: '/demo/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any,
).lazy(() =>
  import('./routes/_authenticated/demo/index.lazy').then((d) => d.Route),
)

const AuthenticatedContentsourceIndexLazyRoute =
  AuthenticatedContentsourceIndexLazyImport.update({
    id: '/content_source/',
    path: '/content_source/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content_source/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedContentIndexLazyRoute =
  AuthenticatedContentIndexLazyImport.update({
    id: '/content/',
    path: '/content/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content/index.lazy').then((d) => d.Route),
  )

const AuthenticatedCalenderIndexLazyRoute =
  AuthenticatedCalenderIndexLazyImport.update({
    id: '/calender/',
    path: '/calender/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/calender/index.lazy').then((d) => d.Route),
  )

const AuthenticatedSettingsNotificationsLazyRoute =
  AuthenticatedSettingsNotificationsLazyImport.update({
    id: '/notifications',
    path: '/notifications',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/notifications.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedSettingsDisplayLazyRoute =
  AuthenticatedSettingsDisplayLazyImport.update({
    id: '/display',
    path: '/display',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/display.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedSettingsAppearanceLazyRoute =
  AuthenticatedSettingsAppearanceLazyImport.update({
    id: '/appearance',
    path: '/appearance',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/appearance.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedSettingsAccountLazyRoute =
  AuthenticatedSettingsAccountLazyImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/account.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedContentsourceRssfeedsLazyRoute =
  AuthenticatedContentsourceRssfeedsLazyImport.update({
    id: '/content_source/rss_feeds',
    path: '/content_source/rss_feeds',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content_source/rss_feeds.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedContentsourceRedditLazyRoute =
  AuthenticatedContentsourceRedditLazyImport.update({
    id: '/content_source/reddit',
    path: '/content_source/reddit',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content_source/reddit.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedContentsourcePdfLazyRoute =
  AuthenticatedContentsourcePdfLazyImport.update({
    id: '/content_source/pdf',
    path: '/content_source/pdf',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content_source/pdf.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedContentsourceGooglesheetsLazyRoute =
  AuthenticatedContentsourceGooglesheetsLazyImport.update({
    id: '/content_source/google_sheets',
    path: '/content_source/google_sheets',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content_source/google_sheets.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedContentsourceExcelLazyRoute =
  AuthenticatedContentsourceExcelLazyImport.update({
    id: '/content_source/excel',
    path: '/content_source/excel',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content_source/excel.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedContentsourceApiLazyRoute =
  AuthenticatedContentsourceApiLazyImport.update({
    id: '/content_source/api',
    path: '/content_source/api',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/content_source/api.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/500': {
      id: '/(auth)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof auth500Import
      parentRoute: typeof rootRoute
    }
    '/(auth)/otp': {
      id: '/(auth)/otp'
      path: '/otp'
      fullPath: '/otp'
      preLoaderRoute: typeof authOtpImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/sign-in-2': {
      id: '/(auth)/sign-in-2'
      path: '/sign-in-2'
      fullPath: '/sign-in-2'
      preLoaderRoute: typeof authSignIn2LazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpLazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503LazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/content_source/api': {
      id: '/_authenticated/content_source/api'
      path: '/content_source/api'
      fullPath: '/content_source/api'
      preLoaderRoute: typeof AuthenticatedContentsourceApiLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/content_source/excel': {
      id: '/_authenticated/content_source/excel'
      path: '/content_source/excel'
      fullPath: '/content_source/excel'
      preLoaderRoute: typeof AuthenticatedContentsourceExcelLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/content_source/google_sheets': {
      id: '/_authenticated/content_source/google_sheets'
      path: '/content_source/google_sheets'
      fullPath: '/content_source/google_sheets'
      preLoaderRoute: typeof AuthenticatedContentsourceGooglesheetsLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/content_source/pdf': {
      id: '/_authenticated/content_source/pdf'
      path: '/content_source/pdf'
      fullPath: '/content_source/pdf'
      preLoaderRoute: typeof AuthenticatedContentsourcePdfLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/content_source/reddit': {
      id: '/_authenticated/content_source/reddit'
      path: '/content_source/reddit'
      fullPath: '/content_source/reddit'
      preLoaderRoute: typeof AuthenticatedContentsourceRedditLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/content_source/rss_feeds': {
      id: '/_authenticated/content_source/rss_feeds'
      path: '/content_source/rss_feeds'
      fullPath: '/content_source/rss_feeds'
      preLoaderRoute: typeof AuthenticatedContentsourceRssfeedsLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/settings/account': {
      id: '/_authenticated/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof AuthenticatedSettingsAccountLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/settings/appearance': {
      id: '/_authenticated/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof AuthenticatedSettingsAppearanceLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/settings/display': {
      id: '/_authenticated/settings/display'
      path: '/display'
      fullPath: '/settings/display'
      preLoaderRoute: typeof AuthenticatedSettingsDisplayLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/settings/notifications': {
      id: '/_authenticated/settings/notifications'
      path: '/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof AuthenticatedSettingsNotificationsLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/calender/': {
      id: '/_authenticated/calender/'
      path: '/calender'
      fullPath: '/calender'
      preLoaderRoute: typeof AuthenticatedCalenderIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/content/': {
      id: '/_authenticated/content/'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof AuthenticatedContentIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/content_source/': {
      id: '/_authenticated/content_source/'
      path: '/content_source'
      fullPath: '/content_source'
      preLoaderRoute: typeof AuthenticatedContentsourceIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/demo/': {
      id: '/_authenticated/demo/'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof AuthenticatedDemoIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/help-center/': {
      id: '/_authenticated/help-center/'
      path: '/help-center'
      fullPath: '/help-center'
      preLoaderRoute: typeof AuthenticatedHelpCenterIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/integration/': {
      id: '/_authenticated/integration/'
      path: '/integration'
      fullPath: '/integration'
      preLoaderRoute: typeof AuthenticatedIntegrationIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/prompts/': {
      id: '/_authenticated/prompts/'
      path: '/prompts'
      fullPath: '/prompts'
      preLoaderRoute: typeof AuthenticatedPromptsIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/referencedata/': {
      id: '/_authenticated/referencedata/'
      path: '/referencedata'
      fullPath: '/referencedata'
      preLoaderRoute: typeof AuthenticatedReferencedataIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/settings/': {
      id: '/_authenticated/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof AuthenticatedSettingsIndexLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/work-flow/': {
      id: '/_authenticated/work-flow/'
      path: '/work-flow'
      fullPath: '/work-flow'
      preLoaderRoute: typeof AuthenticatedWorkFlowIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedSettingsRouteLazyRouteChildren {
  AuthenticatedSettingsAccountLazyRoute: typeof AuthenticatedSettingsAccountLazyRoute
  AuthenticatedSettingsAppearanceLazyRoute: typeof AuthenticatedSettingsAppearanceLazyRoute
  AuthenticatedSettingsDisplayLazyRoute: typeof AuthenticatedSettingsDisplayLazyRoute
  AuthenticatedSettingsNotificationsLazyRoute: typeof AuthenticatedSettingsNotificationsLazyRoute
  AuthenticatedSettingsIndexLazyRoute: typeof AuthenticatedSettingsIndexLazyRoute
}

const AuthenticatedSettingsRouteLazyRouteChildren: AuthenticatedSettingsRouteLazyRouteChildren =
  {
    AuthenticatedSettingsAccountLazyRoute:
      AuthenticatedSettingsAccountLazyRoute,
    AuthenticatedSettingsAppearanceLazyRoute:
      AuthenticatedSettingsAppearanceLazyRoute,
    AuthenticatedSettingsDisplayLazyRoute:
      AuthenticatedSettingsDisplayLazyRoute,
    AuthenticatedSettingsNotificationsLazyRoute:
      AuthenticatedSettingsNotificationsLazyRoute,
    AuthenticatedSettingsIndexLazyRoute: AuthenticatedSettingsIndexLazyRoute,
  }

const AuthenticatedSettingsRouteLazyRouteWithChildren =
  AuthenticatedSettingsRouteLazyRoute._addFileChildren(
    AuthenticatedSettingsRouteLazyRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedSettingsRouteLazyRoute: typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedContentsourceApiLazyRoute: typeof AuthenticatedContentsourceApiLazyRoute
  AuthenticatedContentsourceExcelLazyRoute: typeof AuthenticatedContentsourceExcelLazyRoute
  AuthenticatedContentsourceGooglesheetsLazyRoute: typeof AuthenticatedContentsourceGooglesheetsLazyRoute
  AuthenticatedContentsourcePdfLazyRoute: typeof AuthenticatedContentsourcePdfLazyRoute
  AuthenticatedContentsourceRedditLazyRoute: typeof AuthenticatedContentsourceRedditLazyRoute
  AuthenticatedContentsourceRssfeedsLazyRoute: typeof AuthenticatedContentsourceRssfeedsLazyRoute
  AuthenticatedCalenderIndexLazyRoute: typeof AuthenticatedCalenderIndexLazyRoute
  AuthenticatedContentIndexLazyRoute: typeof AuthenticatedContentIndexLazyRoute
  AuthenticatedContentsourceIndexLazyRoute: typeof AuthenticatedContentsourceIndexLazyRoute
  AuthenticatedDemoIndexLazyRoute: typeof AuthenticatedDemoIndexLazyRoute
  AuthenticatedHelpCenterIndexLazyRoute: typeof AuthenticatedHelpCenterIndexLazyRoute
  AuthenticatedIntegrationIndexLazyRoute: typeof AuthenticatedIntegrationIndexLazyRoute
  AuthenticatedPromptsIndexLazyRoute: typeof AuthenticatedPromptsIndexLazyRoute
  AuthenticatedReferencedataIndexLazyRoute: typeof AuthenticatedReferencedataIndexLazyRoute
  AuthenticatedUsersIndexLazyRoute: typeof AuthenticatedUsersIndexLazyRoute
  AuthenticatedWorkFlowIndexLazyRoute: typeof AuthenticatedWorkFlowIndexLazyRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedSettingsRouteLazyRoute:
    AuthenticatedSettingsRouteLazyRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedContentsourceApiLazyRoute:
    AuthenticatedContentsourceApiLazyRoute,
  AuthenticatedContentsourceExcelLazyRoute:
    AuthenticatedContentsourceExcelLazyRoute,
  AuthenticatedContentsourceGooglesheetsLazyRoute:
    AuthenticatedContentsourceGooglesheetsLazyRoute,
  AuthenticatedContentsourcePdfLazyRoute:
    AuthenticatedContentsourcePdfLazyRoute,
  AuthenticatedContentsourceRedditLazyRoute:
    AuthenticatedContentsourceRedditLazyRoute,
  AuthenticatedContentsourceRssfeedsLazyRoute:
    AuthenticatedContentsourceRssfeedsLazyRoute,
  AuthenticatedCalenderIndexLazyRoute: AuthenticatedCalenderIndexLazyRoute,
  AuthenticatedContentIndexLazyRoute: AuthenticatedContentIndexLazyRoute,
  AuthenticatedContentsourceIndexLazyRoute:
    AuthenticatedContentsourceIndexLazyRoute,
  AuthenticatedDemoIndexLazyRoute: AuthenticatedDemoIndexLazyRoute,
  AuthenticatedHelpCenterIndexLazyRoute: AuthenticatedHelpCenterIndexLazyRoute,
  AuthenticatedIntegrationIndexLazyRoute:
    AuthenticatedIntegrationIndexLazyRoute,
  AuthenticatedPromptsIndexLazyRoute: AuthenticatedPromptsIndexLazyRoute,
  AuthenticatedReferencedataIndexLazyRoute:
    AuthenticatedReferencedataIndexLazyRoute,
  AuthenticatedUsersIndexLazyRoute: AuthenticatedUsersIndexLazyRoute,
  AuthenticatedWorkFlowIndexLazyRoute: AuthenticatedWorkFlowIndexLazyRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteRouteWithChildren
  '/500': typeof errors500LazyRoute
  '/otp': typeof authOtpRoute
  '/sign-in': typeof authSignInRoute
  '/settings': typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  '/forgot-password': typeof authForgotPasswordLazyRoute
  '/sign-in-2': typeof authSignIn2LazyRoute
  '/sign-up': typeof authSignUpLazyRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/503': typeof errors503LazyRoute
  '/': typeof AuthenticatedIndexRoute
  '/content_source/api': typeof AuthenticatedContentsourceApiLazyRoute
  '/content_source/excel': typeof AuthenticatedContentsourceExcelLazyRoute
  '/content_source/google_sheets': typeof AuthenticatedContentsourceGooglesheetsLazyRoute
  '/content_source/pdf': typeof AuthenticatedContentsourcePdfLazyRoute
  '/content_source/reddit': typeof AuthenticatedContentsourceRedditLazyRoute
  '/content_source/rss_feeds': typeof AuthenticatedContentsourceRssfeedsLazyRoute
  '/settings/account': typeof AuthenticatedSettingsAccountLazyRoute
  '/settings/appearance': typeof AuthenticatedSettingsAppearanceLazyRoute
  '/settings/display': typeof AuthenticatedSettingsDisplayLazyRoute
  '/settings/notifications': typeof AuthenticatedSettingsNotificationsLazyRoute
  '/calender': typeof AuthenticatedCalenderIndexLazyRoute
  '/content': typeof AuthenticatedContentIndexLazyRoute
  '/content_source': typeof AuthenticatedContentsourceIndexLazyRoute
  '/demo': typeof AuthenticatedDemoIndexLazyRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexLazyRoute
  '/integration': typeof AuthenticatedIntegrationIndexLazyRoute
  '/prompts': typeof AuthenticatedPromptsIndexLazyRoute
  '/referencedata': typeof AuthenticatedReferencedataIndexLazyRoute
  '/settings/': typeof AuthenticatedSettingsIndexLazyRoute
  '/users': typeof AuthenticatedUsersIndexLazyRoute
  '/work-flow': typeof AuthenticatedWorkFlowIndexLazyRoute
}

export interface FileRoutesByTo {
  '/500': typeof errors500LazyRoute
  '/otp': typeof authOtpRoute
  '/sign-in': typeof authSignInRoute
  '/forgot-password': typeof authForgotPasswordLazyRoute
  '/sign-in-2': typeof authSignIn2LazyRoute
  '/sign-up': typeof authSignUpLazyRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/503': typeof errors503LazyRoute
  '/': typeof AuthenticatedIndexRoute
  '/content_source/api': typeof AuthenticatedContentsourceApiLazyRoute
  '/content_source/excel': typeof AuthenticatedContentsourceExcelLazyRoute
  '/content_source/google_sheets': typeof AuthenticatedContentsourceGooglesheetsLazyRoute
  '/content_source/pdf': typeof AuthenticatedContentsourcePdfLazyRoute
  '/content_source/reddit': typeof AuthenticatedContentsourceRedditLazyRoute
  '/content_source/rss_feeds': typeof AuthenticatedContentsourceRssfeedsLazyRoute
  '/settings/account': typeof AuthenticatedSettingsAccountLazyRoute
  '/settings/appearance': typeof AuthenticatedSettingsAppearanceLazyRoute
  '/settings/display': typeof AuthenticatedSettingsDisplayLazyRoute
  '/settings/notifications': typeof AuthenticatedSettingsNotificationsLazyRoute
  '/calender': typeof AuthenticatedCalenderIndexLazyRoute
  '/content': typeof AuthenticatedContentIndexLazyRoute
  '/content_source': typeof AuthenticatedContentsourceIndexLazyRoute
  '/demo': typeof AuthenticatedDemoIndexLazyRoute
  '/help-center': typeof AuthenticatedHelpCenterIndexLazyRoute
  '/integration': typeof AuthenticatedIntegrationIndexLazyRoute
  '/prompts': typeof AuthenticatedPromptsIndexLazyRoute
  '/referencedata': typeof AuthenticatedReferencedataIndexLazyRoute
  '/settings': typeof AuthenticatedSettingsIndexLazyRoute
  '/users': typeof AuthenticatedUsersIndexLazyRoute
  '/work-flow': typeof AuthenticatedWorkFlowIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/500': typeof auth500Route
  '/(auth)/otp': typeof authOtpRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordLazyRoute
  '/(auth)/sign-in-2': typeof authSignIn2LazyRoute
  '/(auth)/sign-up': typeof authSignUpLazyRoute
  '/(errors)/401': typeof errors401LazyRoute
  '/(errors)/403': typeof errors403LazyRoute
  '/(errors)/404': typeof errors404LazyRoute
  '/(errors)/500': typeof errors500LazyRoute
  '/(errors)/503': typeof errors503LazyRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/content_source/api': typeof AuthenticatedContentsourceApiLazyRoute
  '/_authenticated/content_source/excel': typeof AuthenticatedContentsourceExcelLazyRoute
  '/_authenticated/content_source/google_sheets': typeof AuthenticatedContentsourceGooglesheetsLazyRoute
  '/_authenticated/content_source/pdf': typeof AuthenticatedContentsourcePdfLazyRoute
  '/_authenticated/content_source/reddit': typeof AuthenticatedContentsourceRedditLazyRoute
  '/_authenticated/content_source/rss_feeds': typeof AuthenticatedContentsourceRssfeedsLazyRoute
  '/_authenticated/settings/account': typeof AuthenticatedSettingsAccountLazyRoute
  '/_authenticated/settings/appearance': typeof AuthenticatedSettingsAppearanceLazyRoute
  '/_authenticated/settings/display': typeof AuthenticatedSettingsDisplayLazyRoute
  '/_authenticated/settings/notifications': typeof AuthenticatedSettingsNotificationsLazyRoute
  '/_authenticated/calender/': typeof AuthenticatedCalenderIndexLazyRoute
  '/_authenticated/content/': typeof AuthenticatedContentIndexLazyRoute
  '/_authenticated/content_source/': typeof AuthenticatedContentsourceIndexLazyRoute
  '/_authenticated/demo/': typeof AuthenticatedDemoIndexLazyRoute
  '/_authenticated/help-center/': typeof AuthenticatedHelpCenterIndexLazyRoute
  '/_authenticated/integration/': typeof AuthenticatedIntegrationIndexLazyRoute
  '/_authenticated/prompts/': typeof AuthenticatedPromptsIndexLazyRoute
  '/_authenticated/referencedata/': typeof AuthenticatedReferencedataIndexLazyRoute
  '/_authenticated/settings/': typeof AuthenticatedSettingsIndexLazyRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexLazyRoute
  '/_authenticated/work-flow/': typeof AuthenticatedWorkFlowIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/500'
    | '/otp'
    | '/sign-in'
    | '/settings'
    | '/forgot-password'
    | '/sign-in-2'
    | '/sign-up'
    | '/401'
    | '/403'
    | '/404'
    | '/503'
    | '/'
    | '/content_source/api'
    | '/content_source/excel'
    | '/content_source/google_sheets'
    | '/content_source/pdf'
    | '/content_source/reddit'
    | '/content_source/rss_feeds'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/display'
    | '/settings/notifications'
    | '/calender'
    | '/content'
    | '/content_source'
    | '/demo'
    | '/help-center'
    | '/integration'
    | '/prompts'
    | '/referencedata'
    | '/settings/'
    | '/users'
    | '/work-flow'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/500'
    | '/otp'
    | '/sign-in'
    | '/forgot-password'
    | '/sign-in-2'
    | '/sign-up'
    | '/401'
    | '/403'
    | '/404'
    | '/503'
    | '/'
    | '/content_source/api'
    | '/content_source/excel'
    | '/content_source/google_sheets'
    | '/content_source/pdf'
    | '/content_source/reddit'
    | '/content_source/rss_feeds'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/display'
    | '/settings/notifications'
    | '/calender'
    | '/content'
    | '/content_source'
    | '/demo'
    | '/help-center'
    | '/integration'
    | '/prompts'
    | '/referencedata'
    | '/settings'
    | '/users'
    | '/work-flow'
  id:
    | '__root__'
    | '/_authenticated'
    | '/(auth)/500'
    | '/(auth)/otp'
    | '/(auth)/sign-in'
    | '/_authenticated/settings'
    | '/(auth)/forgot-password'
    | '/(auth)/sign-in-2'
    | '/(auth)/sign-up'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/'
    | '/_authenticated/content_source/api'
    | '/_authenticated/content_source/excel'
    | '/_authenticated/content_source/google_sheets'
    | '/_authenticated/content_source/pdf'
    | '/_authenticated/content_source/reddit'
    | '/_authenticated/content_source/rss_feeds'
    | '/_authenticated/settings/account'
    | '/_authenticated/settings/appearance'
    | '/_authenticated/settings/display'
    | '/_authenticated/settings/notifications'
    | '/_authenticated/calender/'
    | '/_authenticated/content/'
    | '/_authenticated/content_source/'
    | '/_authenticated/demo/'
    | '/_authenticated/help-center/'
    | '/_authenticated/integration/'
    | '/_authenticated/prompts/'
    | '/_authenticated/referencedata/'
    | '/_authenticated/settings/'
    | '/_authenticated/users/'
    | '/_authenticated/work-flow/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  auth500Route: typeof auth500Route
  authOtpRoute: typeof authOtpRoute
  authSignInRoute: typeof authSignInRoute
  authForgotPasswordLazyRoute: typeof authForgotPasswordLazyRoute
  authSignIn2LazyRoute: typeof authSignIn2LazyRoute
  authSignUpLazyRoute: typeof authSignUpLazyRoute
  errors401LazyRoute: typeof errors401LazyRoute
  errors403LazyRoute: typeof errors403LazyRoute
  errors404LazyRoute: typeof errors404LazyRoute
  errors500LazyRoute: typeof errors500LazyRoute
  errors503LazyRoute: typeof errors503LazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  auth500Route: auth500Route,
  authOtpRoute: authOtpRoute,
  authSignInRoute: authSignInRoute,
  authForgotPasswordLazyRoute: authForgotPasswordLazyRoute,
  authSignIn2LazyRoute: authSignIn2LazyRoute,
  authSignUpLazyRoute: authSignUpLazyRoute,
  errors401LazyRoute: errors401LazyRoute,
  errors403LazyRoute: errors403LazyRoute,
  errors404LazyRoute: errors404LazyRoute,
  errors500LazyRoute: errors500LazyRoute,
  errors503LazyRoute: errors503LazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/(auth)/500",
        "/(auth)/otp",
        "/(auth)/sign-in",
        "/(auth)/forgot-password",
        "/(auth)/sign-in-2",
        "/(auth)/sign-up",
        "/(errors)/401",
        "/(errors)/403",
        "/(errors)/404",
        "/(errors)/500",
        "/(errors)/503"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated/route.tsx",
      "children": [
        "/_authenticated/settings",
        "/_authenticated/",
        "/_authenticated/content_source/api",
        "/_authenticated/content_source/excel",
        "/_authenticated/content_source/google_sheets",
        "/_authenticated/content_source/pdf",
        "/_authenticated/content_source/reddit",
        "/_authenticated/content_source/rss_feeds",
        "/_authenticated/calender/",
        "/_authenticated/content/",
        "/_authenticated/content_source/",
        "/_authenticated/demo/",
        "/_authenticated/help-center/",
        "/_authenticated/integration/",
        "/_authenticated/prompts/",
        "/_authenticated/referencedata/",
        "/_authenticated/users/",
        "/_authenticated/work-flow/"
      ]
    },
    "/(auth)/500": {
      "filePath": "(auth)/500.tsx"
    },
    "/(auth)/otp": {
      "filePath": "(auth)/otp.tsx"
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx"
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated/settings/route.lazy.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/settings/account",
        "/_authenticated/settings/appearance",
        "/_authenticated/settings/display",
        "/_authenticated/settings/notifications",
        "/_authenticated/settings/"
      ]
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password.lazy.tsx"
    },
    "/(auth)/sign-in-2": {
      "filePath": "(auth)/sign-in-2.lazy.tsx"
    },
    "/(auth)/sign-up": {
      "filePath": "(auth)/sign-up.lazy.tsx"
    },
    "/(errors)/401": {
      "filePath": "(errors)/401.lazy.tsx"
    },
    "/(errors)/403": {
      "filePath": "(errors)/403.lazy.tsx"
    },
    "/(errors)/404": {
      "filePath": "(errors)/404.lazy.tsx"
    },
    "/(errors)/500": {
      "filePath": "(errors)/500.lazy.tsx"
    },
    "/(errors)/503": {
      "filePath": "(errors)/503.lazy.tsx"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content_source/api": {
      "filePath": "_authenticated/content_source/api.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content_source/excel": {
      "filePath": "_authenticated/content_source/excel.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content_source/google_sheets": {
      "filePath": "_authenticated/content_source/google_sheets.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content_source/pdf": {
      "filePath": "_authenticated/content_source/pdf.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content_source/reddit": {
      "filePath": "_authenticated/content_source/reddit.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content_source/rss_feeds": {
      "filePath": "_authenticated/content_source/rss_feeds.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings/account": {
      "filePath": "_authenticated/settings/account.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/settings/appearance": {
      "filePath": "_authenticated/settings/appearance.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/settings/display": {
      "filePath": "_authenticated/settings/display.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/settings/notifications": {
      "filePath": "_authenticated/settings/notifications.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/calender/": {
      "filePath": "_authenticated/calender/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content/": {
      "filePath": "_authenticated/content/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/content_source/": {
      "filePath": "_authenticated/content_source/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/demo/": {
      "filePath": "_authenticated/demo/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/help-center/": {
      "filePath": "_authenticated/help-center/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/integration/": {
      "filePath": "_authenticated/integration/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/prompts/": {
      "filePath": "_authenticated/prompts/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/referencedata/": {
      "filePath": "_authenticated/referencedata/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings/": {
      "filePath": "_authenticated/settings/index.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/users/": {
      "filePath": "_authenticated/users/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/work-flow/": {
      "filePath": "_authenticated/work-flow/index.lazy.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
